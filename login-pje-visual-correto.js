/**
 * Login PJE - VERS√ÉO CORRIGIDA - Execu√ß√£o LOCAL com Navegador VIS√çVEL
 *
 * Esta vers√£o:
 * - Abre o navegador Chromium VIS√çVEL
 * - Usa Stealth Plugin para evitar detec√ß√£o
 * - N√ÉO usa state hardcoded (evita HTTP 400)
 * - Navega primeiro para a URL de entrada e captura o state din√¢mico
 *
 * COMO USAR:
 * 1. Atualize suas credenciais abaixo (CPF e SENHA)
 * 2. Execute: node login-pje-visual-correto.js
 * 3. O navegador vai abrir e voc√™ ver√° tudo acontecendo!
 *
 * DEPEND√äNCIAS:
 * npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth
 */

import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';

// Adiciona o plugin stealth ANTES de lan√ßar o navegador
puppeteer.use(StealthPlugin());

// ‚ö†Ô∏è ATUALIZE SUAS CREDENCIAIS AQUI:
const CPF = '07529294610';
const SENHA = '12345678A@';

// URL base do PJE TRT3 - vai gerar o state dinamicamente
const PJE_BASE_URL = 'https://pje.trt3.jus.br/primeirograu/login.seam';

// Fun√ß√£o auxiliar para delay
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function executarLoginVisual() {
  console.log('üöÄ Iniciando navegador com Stealth Plugin...\n');

  // Lan√ßa o navegador COM INTERFACE GR√ÅFICA (headless: false)
  const browser = await puppeteer.launch({
    headless: false,  // ‚Üê FALSO = mostra o navegador!
    defaultViewport: null, // Usa o tamanho da janela
    args: [
      '--start-maximized', // Inicia maximizado
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-blink-features=AutomationControlled', // Remove bandeiras de automa√ß√£o
      '--disable-dev-shm-usage',
      '--disable-web-security',
      '--disable-features=IsolateOrigins,site-per-process',
    ],
  });

  const page = await browser.newPage();

  try {
    console.log('üîß Configurando anti-detec√ß√£o...');

    // User-Agent realista
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36');

    // Headers extras
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': 'none',
      'Cache-Control': 'max-age=0',
    });

    // Remove detec√ß√£o de webdriver
    await page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, 'webdriver', {
        get: () => false,
      });
      window.chrome = { runtime: {} };
      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      });
      Object.defineProperty(navigator, 'languages', {
        get: () => ['pt-BR', 'pt', 'en-US', 'en'],
      });
    });

    console.log('üåê Navegando para p√°gina inicial do PJE...');
    console.log(`    ${PJE_BASE_URL}\n`);

    await page.goto(PJE_BASE_URL, {
      waitUntil: 'networkidle2',
      timeout: 60000
    });

    console.log('‚úÖ P√°gina carregada!\n');

    // Delay humano para observar a p√°gina
    await delay(1500);

    // Verifica se j√° foi redirecionado para SSO
    let currentUrl = page.url();
    console.log(`üìç URL atual: ${currentUrl}\n`);

    if (currentUrl.includes('sso.cloud.pje.jus.br')) {
      console.log('‚úÖ J√° est√° na p√°gina de login SSO\n');
    } else {
      console.log('üîç Procurando bot√£o "Entrar com PDPJ"...');

      try {
        // Aguarda o bot√£o "Entrar com PDPJ" aparecer
        await page.waitForSelector('#btnSsoPdpj', { visible: true, timeout: 10000 });
        console.log('‚úÖ Bot√£o "Entrar com PDPJ" encontrado!\n');

        // Move o mouse at√© o bot√£o antes de clicar (comportamento humano)
        const pdpjButton = await page.$('#btnSsoPdpj');
        if (pdpjButton) {
          const box = await pdpjButton.boundingBox();
          if (box) {
            console.log('üñ±Ô∏è  Movendo mouse at√© o bot√£o...');
            await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, { steps: 10 });
            await delay(500);
          }
        }

        console.log('üëÜ Clicando em "Entrar com PDPJ"...\n');

        // Clica no bot√£o e aguarda navega√ß√£o para SSO
        await Promise.all([
          page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 }),
          page.click('#btnSsoPdpj'),
        ]);

        currentUrl = page.url();
        console.log(`üìç Redirecionado para: ${currentUrl}\n`);

        if (currentUrl.includes('sso.cloud.pje.jus.br')) {
          console.log('‚úÖ Agora est√° na p√°gina de login SSO\n');
        } else {
          console.log('‚ö†Ô∏è  URL inesperada ap√≥s clicar no bot√£o PDPJ\n');
        }

      } catch (e) {
        console.error('‚ùå Erro ao clicar no bot√£o PDPJ:', e.message);
        console.log('   Tentando continuar mesmo assim...\n');
      }
    }

    // Delay humano antes de interagir
    console.log('‚è≥ Aguardando 2 segundos (comportamento humano)...');
    await delay(2000);

    console.log('üë§ Preenchendo CPF com digita√ß√£o humana...');
    await page.waitForSelector('#username', { visible: true, timeout: 10000 });
    await page.click('#username');
    await delay(500);

    // Digita CARACTERE POR CARACTERE com delay aleat√≥rio
    for (let i = 0; i < CPF.length; i++) {
      const char = CPF[i];
      await page.type('#username', char, { delay: Math.random() * 100 + 50 });
      process.stdout.write(`\r    Digitando CPF: ${'*'.repeat(i + 1)}${' '.repeat(CPF.length - i - 1)}`);
    }
    console.log(' ‚úì\n');

    // Delay entre campos
    await delay(1000);

    console.log('üîí Preenchendo senha com digita√ß√£o humana...');
    await page.waitForSelector('#password', { visible: true, timeout: 10000 });
    await page.click('#password');
    await delay(500);

    // Digita senha caractere por caractere
    for (let i = 0; i < SENHA.length; i++) {
      const char = SENHA[i];
      await page.type('#password', char, { delay: Math.random() * 100 + 50 });
      process.stdout.write(`\r    Digitando senha: ${'*'.repeat(i + 1)}${' '.repeat(SENHA.length - i - 1)}`);
    }
    console.log(' ‚úì\n');

    // Delay antes de clicar no bot√£o
    await delay(1500);

    console.log('üñ±Ô∏è  Simulando movimento do mouse at√© o bot√£o...');

    // Simula movimento do mouse antes de clicar
    const loginButton = await page.$('#kc-login');
    if (loginButton) {
      const box = await loginButton.boundingBox();
      if (box) {
        // Move o mouse gradualmente at√© o bot√£o (10 passos)
        await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, { steps: 10 });
        await delay(300);
      }
    }

    console.log('üëÜ Clicando em Entrar...\n');

    // Clica e aguarda navega√ß√£o
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
      page.click('#kc-login'),
    ]);

    console.log('‚è≥ Aguardando redirecionamento...');
    await delay(5000); // Aguarda mais tempo para carregar p√°gina p√≥s-login

    // Verifica resultado
    const finalUrl = page.url();
    const title = await page.title();

    console.log('\n' + '='.repeat(60));
    console.log('üìä RESULTADO:');
    console.log('='.repeat(60));
    console.log(`üìç URL final: ${finalUrl}`);
    console.log(`üìÑ T√≠tulo: ${title}`);
    console.log('='.repeat(60) + '\n');

    if (finalUrl.includes('403') || title.includes('403') || title.toLowerCase().includes('forbidden')) {
      console.error('‚ùå Erro 403 - CloudFront bloqueou o acesso');
      console.log('üí° Poss√≠veis causas:');
      console.log('   - M√∫ltiplas tentativas consecutivas');
      console.log('   - IP marcado como suspeito');
      console.log('   - Captcha adicional pode ter sido acionado');
      console.log('   - Tente aguardar alguns minutos antes de tentar novamente\n');
    } else if (finalUrl.includes('400') || title.includes('400')) {
      console.log('‚ö†Ô∏è  Erro HTTP 400 - Bad Request');
      console.log('   Poss√≠veis causas:');
      console.log('   - Sess√£o OAuth expirou');
      console.log('   - Credenciais inv√°lidas');
      console.log('   - Verifique o navegador aberto para mais detalhes\n');
    } else if (finalUrl.includes('pje.trt3.jus.br') && !finalUrl.includes('error') && !finalUrl.includes('sso.cloud')) {
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('üéâ Voc√™ foi redirecionado para o sistema PJE!');

      // Verifica se realmente carregou a p√°gina interna
      const pageContent = await page.content();
      if (pageContent.includes('Processo') || pageContent.includes('menu') || pageContent.includes('logout')) {
        console.log('‚úÖ P√°gina interna do PJE carregada com sucesso!\n');
      } else {
        console.log('‚ö†Ô∏è  P√°gina carregou mas pode ter erros\n');
      }
    } else if (finalUrl.includes('sso.cloud.pje.jus.br')) {
      console.log('‚ö†Ô∏è  Ainda na p√°gina de login SSO');
      console.log('   Verifique se as credenciais est√£o corretas');
      console.log('   Ou se h√° algum captcha/verifica√ß√£o adicional\n');
    } else {
      console.log('‚ö†Ô∏è  Resultado inesperado');
      console.log('   Verifique o navegador para mais detalhes\n');
    }

    // Tira screenshot
    console.log('üì∏ Tirando screenshot...');
    await page.screenshot({
      path: 'login-pje-resultado-correto.png',
      fullPage: true
    });
    console.log('‚úÖ Screenshot salvo: login-pje-resultado-correto.png\n');

    console.log('üëÅÔ∏è  O navegador ficar√° aberto para voc√™ inspecionar.');
    console.log('    Pressione Ctrl+C para fechar quando terminar.\n');

    // Mant√©m o navegador aberto para inspe√ß√£o
    // await browser.close(); // ‚Üê Comentado para manter aberto

  } catch (error) {
    console.error('\n‚ùå Erro durante o processo:', error.message);
    console.error('Stack:', error.stack);

    // Captura informa√ß√µes √∫teis para debug
    try {
      const url = page.url();
      const title = await page.title();
      console.log(`\nüìç URL no momento do erro: ${url}`);
      console.log(`üìÑ T√≠tulo no momento do erro: ${title}`);

      // Tenta tirar screenshot mesmo com erro
      await page.screenshot({
        path: 'login-pje-erro-correto.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot de erro salvo: login-pje-erro-correto.png\n');
    } catch (e) {
      console.error('N√£o foi poss√≠vel capturar informa√ß√µes adicionais');
    }

    console.log('üëÅÔ∏è  O navegador ficar√° aberto para voc√™ inspecionar o erro.');
    console.log('    Pressione Ctrl+C para fechar quando terminar.\n');

    // Mant√©m o navegador aberto mesmo com erro
    // await browser.close(); // ‚Üê Comentado para manter aberto
  }
}

// Executa a fun√ß√£o
executarLoginVisual().catch(console.error);
