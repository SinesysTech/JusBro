/**
 * Login PJE COMPLETO - Script Standalone para Testes Manuais
 *
 * ‚ö†Ô∏è IMPORTANTE:
 * Este script √© apenas para TESTES MANUAIS. O sistema principal usa
 * credenciais do BANCO DE DADOS atrav√©s do gerenciamento em /pje/credentials
 *
 * FLUXO COMPLETO:
 * 1. Acessa p√°gina de login do PJE
 * 2. Clica no bot√£o "Entrar com PDPJ"
 * 3. Preenche CPF com digita√ß√£o humana
 * 4. Preenche senha com digita√ß√£o humana
 * 5. Clica em Entrar
 * 6. Aguarda redirecionamento
 *
 * COMO USAR:
 * Op√ß√£o 1 - Linha de comando:
 *   node server/scripts/pje-trt/common/login.js <CPF> <SENHA>
 *   Exemplo: node server/scripts/pje-trt/common/login.js 12345678900 minhasenha
 *
 * Op√ß√£o 2 - Vari√°veis de ambiente (apenas para testes):
 *   Configure PJE_CPF e PJE_SENHA no arquivo .env
 *   Execute: node server/scripts/pje-trt/common/login.js
 *
 * DEPEND√äNCIAS:
 * npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth
 */

import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';

// Adiciona o plugin stealth ANTES de lan√ßar o navegador
puppeteer.use(StealthPlugin());

// Obt√©m credenciais via linha de comando ou vari√°veis de ambiente
const args = process.argv.slice(2);
let CPF = args[0] || process.env.PJE_CPF;
let SENHA = args[1] || process.env.PJE_SENHA;

// Valida√ß√£o de credenciais
if (!CPF || !SENHA) {
  console.error('\n' + '='.repeat(70));
  console.error('‚ùå ERRO: Credenciais PJE n√£o fornecidas');
  console.error('='.repeat(70));
  console.error('\nüí° Como usar este script:');
  console.error('\nOp√ß√£o 1 - Argumentos de linha de comando:');
  console.error('  node server/scripts/pje-trt/common/login.js <CPF> <SENHA>');
  console.error('  Exemplo: node server/scripts/pje-trt/common/login.js 12345678900 minhasenha');
  console.error('\nOp√ß√£o 2 - Vari√°veis de ambiente (apenas para testes):');
  console.error('  1. Configure PJE_CPF e PJE_SENHA no arquivo .env');
  console.error('  2. Execute: node server/scripts/pje-trt/common/login.js');
  console.error('\n‚ö†Ô∏è  LEMBRE-SE: O sistema principal usa credenciais do BANCO DE DADOS');
  console.error('   Configure em: http://localhost:3000/pje/credentials\n');
  console.error('='.repeat(70) + '\n');
  process.exit(1);
}

// URL da p√°gina de login do PJE TRT3
const PJE_LOGIN_URL = 'https://pje.trt3.jus.br/primeirograu/login.seam';

// Fun√ß√£o auxiliar para delay
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function executarLoginCompleto() {
  console.log('üöÄ Iniciando navegador com Stealth Plugin...\n');

  // Lan√ßa o navegador COM INTERFACE GR√ÅFICA (headless: false)
  const browser = await puppeteer.launch({
    headless: false,  // ‚Üê FALSO = mostra o navegador!
    defaultViewport: null, // Usa o tamanho da janela
    args: [
      '--start-maximized', // Inicia maximizado
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-blink-features=AutomationControlled', // Remove bandeiras de automa√ß√£o
      '--disable-dev-shm-usage',
      '--disable-web-security',
      '--disable-features=IsolateOrigins,site-per-process',
    ],
  });

  const page = await browser.newPage();

  try {
    console.log('üîß Configurando anti-detec√ß√£o...');

    // User-Agent realista
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36');

    // Headers extras
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': 'none',
      'Cache-Control': 'max-age=0',
    });

    // Remove detec√ß√£o de webdriver
    await page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, 'webdriver', {
        get: () => false,
      });
      window.chrome = { runtime: {} };
      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      });
      Object.defineProperty(navigator, 'languages', {
        get: () => ['pt-BR', 'pt', 'en-US', 'en'],
      });
    });

    console.log('üåê Navegando para p√°gina de login do PJE...');
    console.log(`    ${PJE_LOGIN_URL}\n`);

    await page.goto(PJE_LOGIN_URL, {
      waitUntil: 'networkidle2',
      timeout: 60000
    });

    console.log('‚úÖ P√°gina carregada!\n');

    // Delay humano para observar a p√°gina
    await delay(1500);

    // PASSO 1: Clicar no bot√£o "Entrar com PDPJ"
    console.log('üîç Procurando bot√£o "Entrar com PDPJ"...');

    try {
      // Aguarda o bot√£o aparecer
      await page.waitForSelector('#btnSsoPdpj', { visible: true, timeout: 10000 });
      console.log('‚úÖ Bot√£o "Entrar com PDPJ" encontrado!\n');

      // Move o mouse at√© o bot√£o (comportamento humano)
      const pdpjButton = await page.$('#btnSsoPdpj');
      if (pdpjButton) {
        const box = await pdpjButton.boundingBox();
        if (box) {
          console.log('üñ±Ô∏è  Movendo mouse at√© o bot√£o "Entrar com PDPJ"...');
          await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, { steps: 10 });
          await delay(500);
        }
      }

      console.log('üëÜ Clicando em "Entrar com PDPJ"...\n');

      // Clica e aguarda redirecionamento para SSO
      await Promise.all([
        page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 }),
        page.click('#btnSsoPdpj'),
      ]);

      const ssoUrl = page.url();
      console.log(`üìç Redirecionado para SSO: ${ssoUrl}\n`);

      if (ssoUrl.includes('sso.cloud.pje.jus.br')) {
        console.log('‚úÖ Agora na p√°gina de login SSO!\n');
      } else {
        console.log('‚ö†Ô∏è  URL inesperada, mas continuando...\n');
      }

    } catch (e) {
      console.error('‚ùå Erro ao clicar no bot√£o PDPJ:', e.message);
      console.log('   Verificando se j√° est√° na p√°gina SSO...\n');

      const currentUrl = page.url();
      if (!currentUrl.includes('sso.cloud.pje.jus.br')) {
        throw new Error('N√£o conseguiu acessar a p√°gina de login SSO');
      }
    }

    // PASSO 2: Preencher CPF
    console.log('‚è≥ Aguardando p√°gina SSO carregar...');

    // Aguarda at√© 15 segundos para o campo de CPF aparecer (importante para TRTs mais lentos)
    console.log('üë§ Preenchendo CPF com digita√ß√£o humana...');
    await page.waitForSelector('#username', { visible: true, timeout: 15000 });
    await page.click('#username');
    await delay(500);

    // Digita CARACTERE POR CARACTERE com delay aleat√≥rio
    for (let i = 0; i < CPF.length; i++) {
      const char = CPF[i];
      await page.type('#username', char, { delay: Math.random() * 100 + 50 });
      process.stdout.write(`\r    Digitando CPF: ${'*'.repeat(i + 1)}${' '.repeat(Math.max(0, CPF.length - i - 1))}`);
    }
    console.log(' ‚úì\n');

    // PASSO 3: Preencher senha
    await delay(1000);

    console.log('üîí Preenchendo senha com digita√ß√£o humana...');
    await page.waitForSelector('#password', { visible: true, timeout: 10000 });
    await page.click('#password');
    await delay(500);

    // Digita senha caractere por caractere
    for (let i = 0; i < SENHA.length; i++) {
      const char = SENHA[i];
      await page.type('#password', char, { delay: Math.random() * 100 + 50 });
      process.stdout.write(`\r    Digitando senha: ${'*'.repeat(i + 1)}${' '.repeat(Math.max(0, SENHA.length - i - 1))}`);
    }
    console.log(' ‚úì\n');

    // PASSO 4: Clicar em Entrar
    await delay(1500);

    console.log('üñ±Ô∏è  Simulando movimento do mouse at√© o bot√£o Entrar...');

    // Simula movimento do mouse antes de clicar
    const loginButton = await page.$('#kc-login');
    if (loginButton) {
      const box = await loginButton.boundingBox();
      if (box) {
        await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, { steps: 10 });
        await delay(300);
      }
    }

    console.log('üëÜ Clicando em Entrar...\n');

    // Clica e aguarda navega√ß√£o
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
      page.click('#kc-login'),
    ]);

    // PASSO 5: Verificar resultado
    console.log('‚è≥ Aguardando redirecionamento...');
    await delay(5000);

    const finalUrl = page.url();
    const title = await page.title();

    console.log('\n' + '='.repeat(70));
    console.log('üìä RESULTADO FINAL:');
    console.log('='.repeat(70));
    console.log(`üìç URL final: ${finalUrl}`);
    console.log(`üìÑ T√≠tulo: ${title}`);
    console.log('='.repeat(70) + '\n');

    // An√°lise do resultado
    if (finalUrl.includes('403') || title.includes('403') || title.toLowerCase().includes('forbidden')) {
      console.error('‚ùå Erro 403 - CloudFront bloqueou o acesso');
      console.log('üí° Poss√≠veis causas:');
      console.log('   - M√∫ltiplas tentativas consecutivas');
      console.log('   - IP marcado como suspeito');
      console.log('   - Aguarde alguns minutos e tente novamente\n');
    } else if (finalUrl.includes('400') || title.includes('400')) {
      console.log('‚ö†Ô∏è  HTTP 400 - Bad Request');
      console.log('   Poss√≠vel sess√£o OAuth expirada ou credenciais inv√°lidas');
      console.log('   MAS: CloudFront N√ÉO bloqueou (n√£o √© erro 403!)\n');
    } else if (finalUrl.includes('pje.trt3.jus.br') && !finalUrl.includes('sso.cloud')) {
      console.log('‚úÖ‚úÖ‚úÖ LOGIN REALIZADO COM SUCESSO! ‚úÖ‚úÖ‚úÖ');
      console.log('üéâ Voc√™ foi redirecionado para o sistema PJE!\n');

      // Verifica conte√∫do da p√°gina
      try {
        const pageContent = await page.content();
        if (pageContent.toLowerCase().includes('processo') ||
            pageContent.toLowerCase().includes('menu') ||
            pageContent.toLowerCase().includes('logout')) {
          console.log('‚úÖ P√°gina interna do PJE detectada!');
          console.log('‚úÖ Sistema carregou corretamente!\n');
        }
      } catch (e) {
        console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel verificar conte√∫do da p√°gina\n');
      }
    } else if (finalUrl.includes('sso.cloud.pje.jus.br')) {
      console.log('‚ö†Ô∏è  Ainda na p√°gina de login SSO');
      console.log('   Poss√≠veis causas:');
      console.log('   - Credenciais incorretas');
      console.log('   - Captcha ou verifica√ß√£o adicional');
      console.log('   - Verifique o navegador aberto\n');
    } else {
      console.log('‚ö†Ô∏è  Resultado inesperado');
      console.log('   Verifique o navegador para mais detalhes\n');
    }

    // Tira screenshot
    console.log('üì∏ Tirando screenshot...');
    await page.screenshot({
      path: 'login-pje-completo-resultado.png',
      fullPage: true
    });
    console.log('‚úÖ Screenshot salvo: login-pje-completo-resultado.png\n');

    console.log('=' .repeat(70));
    console.log('üëÅÔ∏è  O navegador ficar√° ABERTO para voc√™ inspecionar.');
    console.log('    Pressione Ctrl+C quando terminar.\n');
    console.log('üí° Dica: Voc√™ pode continuar navegando no sistema manualmente');
    console.log('=' .repeat(70) + '\n');

    // Mant√©m o navegador aberto
    // await browser.close(); // ‚Üê Comentado intencionalmente

  } catch (error) {
    console.error('\n' + '='.repeat(70));
    console.error('‚ùå ERRO DURANTE O PROCESSO:');
    console.error('='.repeat(70));
    console.error(`Mensagem: ${error.message}`);
    console.error(`Stack: ${error.stack}\n`);

    // Captura informa√ß√µes para debug
    try {
      const url = page.url();
      const title = await page.title();
      console.log(`üìç URL no momento do erro: ${url}`);
      console.log(`üìÑ T√≠tulo no momento do erro: ${title}\n`);

      // Screenshot de erro
      await page.screenshot({
        path: 'login-pje-completo-erro.png',
        fullPage: true
      });
      console.log('üì∏ Screenshot de erro salvo: login-pje-completo-erro.png\n');
    } catch (e) {
      console.error('N√£o foi poss√≠vel capturar informa√ß√µes adicionais');
    }

    console.log('üëÅÔ∏è  O navegador ficar√° aberto para diagn√≥stico.');
    console.log('    Pressione Ctrl+C para fechar.\n');

    // Mant√©m aberto mesmo com erro
    // await browser.close();
  }
}

// Executa a fun√ß√£o
console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë                   LOGIN PJE - VERS√ÉO COMPLETA                     ‚ïë');
console.log('‚ïë              Com Anti-Detec√ß√£o e Navegador Vis√≠vel                ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

executarLoginCompleto().catch(console.error);
