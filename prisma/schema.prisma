generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tribunal {
  id         String           @id @default(uuid())
  codigo     String           @unique
  nome       String
  regiao     String
  uf         String
  cidadeSede String
  ativo      Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  configs    TribunalConfig[]

  @@index([codigo])
  @@index([regiao])
  @@index([ativo])
}

model TribunalConfig {
  id                 String               @id @default(uuid())
  grau               String
  urlBase            String
  urlLoginSeam       String
  urlApi             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  tribunalId         String
  credenciais        CredencialTribunal[]
  raspagens          Raspagem[]
  scrapeExecutions   ScrapeExecution[]
  scrapeJobTribunals ScrapeJobTribunal[]
  tribunal           Tribunal             @relation(fields: [tribunalId], references: [id], onDelete: Cascade)

  @@unique([tribunalId, grau])
  @@index([grau])
}

model Raspagem {
  id               String          @id @default(uuid())
  status           String
  tipo             String
  idAgrupamento    Int?
  totalProcessos   Int             @default(0)
  errorMessage     String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  completedAt      DateTime?
  tribunalConfigId String?
  processos        Processo[]
  tribunalConfig   TribunalConfig? @relation(fields: [tribunalConfigId], references: [id])

  @@index([status])
  @@index([tipo])
  @@index([createdAt])
  @@index([tribunalConfigId])
}

model Processo {
  id                     String    @id @default(uuid())
  numeroProcesso         String    @unique
  dataAjuizamento        String?
  classe                 String?
  assunto                String?
  vara                   String?
  fase                   String?
  valor                  Float?
  nomeParteAutora        String?
  nomeParteRe            String?
  idProcesso             String?
  dataUltimaMovimentacao String?
  situacao               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  raspagemId             String?
  partes                 Parte[]
  raspagem               Raspagem? @relation(fields: [raspagemId], references: [id])

  @@index([numeroProcesso])
  @@index([nomeParteAutora])
  @@index([nomeParteRe])
  @@index([createdAt])
}

model Parte {
  id         String   @id @default(uuid())
  nome       String
  tipo       String
  documento  String?
  processoId String
  createdAt  DateTime @default(now())
  processo   Processo @relation(fields: [processoId], references: [id], onDelete: Cascade)

  @@index([tipo])
  @@index([processoId])
}

model Escritorio {
  id        String     @id @default(uuid())
  nome      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  advogados Advogado[]
}

model Advogado {
  id           String       @id @default(uuid())
  nome         String
  oabNumero    String
  oabUf        String
  cpf          String
  idAdvogado   String?
  escritorioId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  escritorio   Escritorio?  @relation(fields: [escritorioId], references: [id])
  credenciais  Credencial[]

  @@unique([oabNumero, oabUf])
  @@index([cpf])
}

model Credencial {
  id         String               @id @default(uuid())
  senha      String
  descricao  String?
  ativa      Boolean              @default(true)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  advogadoId String
  advogado   Advogado             @relation(fields: [advogadoId], references: [id], onDelete: Cascade)
  tribunais  CredencialTribunal[]

  @@unique([advogadoId, senha])
}

model CredencialTribunal {
  id               String         @id @default(uuid())
  tipoTribunal     String
  validadoEm       DateTime?
  credencialId     String
  tribunalConfigId String
  credencial       Credencial     @relation(fields: [credencialId], references: [id], onDelete: Cascade)
  tribunalConfig   TribunalConfig @relation(fields: [tribunalConfigId], references: [id], onDelete: Cascade)

  @@unique([credencialId, tribunalConfigId])
}

model ScrapeJob {
  id            String              @id @default(uuid())
  status        String
  scrapeType    String
  scrapeSubType String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
  logs          Json?
  executions    ScrapeExecution[]
  tribunals     ScrapeJobTribunal[]

  @@index([status])
  @@index([scrapeType])
  @@index([createdAt])
}

model ScrapeJobTribunal {
  id               String         @id @default(uuid())
  status           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  scrapeJobId      String
  tribunalConfigId String
  scrapeJob        ScrapeJob      @relation(fields: [scrapeJobId], references: [id], onDelete: Cascade)
  tribunalConfig   TribunalConfig @relation(fields: [tribunalConfigId], references: [id], onDelete: Cascade)

  @@unique([scrapeJobId, tribunalConfigId])
  @@index([status])
}

model ScrapeExecution {
  id               String         @id @default(uuid())
  status           String
  processosCount   Int            @default(0)
  resultData       String?
  errorMessage     String?
  retryAttempt     Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  startedAt        DateTime?
  completedAt      DateTime?
  scrapeJobId      String
  tribunalConfigId String
  logs             Json?
  scrapeJob        ScrapeJob      @relation(fields: [scrapeJobId], references: [id], onDelete: Cascade)
  tribunalConfig   TribunalConfig @relation(fields: [tribunalConfigId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([scrapeJobId])
  @@index([tribunalConfigId])
  @@index([createdAt])
}
